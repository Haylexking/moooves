/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/{matchId}/submit-result": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a result for a tournament match
         * @description This endpoint records the result of a given match in a tournament.   Logic flow:   - A match is played between 2 players (player1 vs player2).   - Once the result is submitted, the winner is saved in the winner field.   - The backend pairs winners of the current round to create the next round.   - This continues until the final round produces a single champion.   - The top 3 placements (1st, 2nd, 3rd) are recorded for tournaments.
         *     Why important? This is the core of the tournament flow. Without submitting results, the system cannot know who advances to the next round or how to distribute rankings and prizes.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the match */
                    matchId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 64f9c23d8f9b1234abcd5678 */
                        winnerId?: string;
                    };
                };
            };
            responses: {
                /** @description Result submitted successfully and next round generated if applicable */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Result submitted",
                         *       "matchId": "64f9c23d8f9b1234abcd5678",
                         *       "winner": "64f9c23d8f9b1234abcd5678"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid match or already completed */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Match already has a winner"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Match not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Match not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed "
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/{matchId}/submit-resultoffline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a result for an offline (Bluetooth) tournament match
         * @description Used when players compete offline (e.g., via Bluetooth handshake).   The system validates the handshakeToken from the match object to ensure the result is genuine.   After verification, the result is saved and the winner progresses just like in online tournaments.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Match ID */
                    matchId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        winnerId?: string;
                        handshakeToken?: string;
                    };
                };
            };
            responses: {
                /** @description Offline result accepted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid match or already completed */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Match already has a winner"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Match not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Match not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed "
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/move": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make a move in an active match
         * @description This endpoint allows a player to make a move in a Tic-Tac-Toe style tournament game.
         *     - Each player is assigned a symbol: X (player1) or O (player2).
         *     - A player must play only when it's their turn.
         *     - The system checks for a winner after each move.
         *
         *     Winning logic:
         *     1. Immediate Win: If a player forms 5 in a row (horizontal, vertical, diagonal, or anti-diagonal), they win immediately.
         *     2. Highest Score Win: If no 5 in a row and the game ends (board full or time expired), the winner is decided by highest score.
         *        - Scoring: 2 in a row = 1 point, 3 in a row = 3 points, 4 in a row = 5 points.
         *     3. Draw: If both players have equal scores when the game ends, the match is a draw.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 64fc98e9a8120c2b4d3f1234 */
                        playerId: string;
                        /** @example 5 */
                        row: number;
                        /** @example 8 */
                        col: number;
                        /** @example 650b7d9a87f91345c1234567 */
                        matchid: string;
                    };
                };
            };
            responses: {
                /** @description Move successfully made (or game ended) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Invalid request (missing fields, cell already taken, or match already completed) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid move (not the player's turn or player not in the match) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Match not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/moves": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new match for offline 1v1
         * @description Initializes a new match object in the database.   This is usually triggered when pairing players in the first round or subsequent rounds.   The system assigns player1 and player2, sets the board to default state, and status to in-progress.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        player1?: string;
                        matchroomId?: string;
                        player2?: string;
                    };
                };
            };
            responses: {
                /** @description Match created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "matchroomId": "650a01c28f9b5678abcd1234",
                         *       "player1": "64f9c23d8f9b1234abcd5678",
                         *       "player2": "64f9c23d8f9b1234abcd5679",
                         *       "status": "in-progress"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid input */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed "
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all matches
         * @description Retrieves all matches from the database.   Useful for admins or for viewing tournament progress.   Returns details like player IDs, board state, and status.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "_id": "650a01c28f9b5678abcd1234",
                         *         "player1": "64f9c23d8f9b1234abcd5678",
                         *         "player2": "64f9c23d8f9b1234abcd5679",
                         *         "status": "in-progress",
                         *         "board": [
                         *           [
                         *             "X",
                         *             "",
                         *             ""
                         *           ],
                         *           [
                         *             "",
                         *             "O",
                         *             ""
                         *           ],
                         *           [
                         *             "",
                         *             "",
                         *             ""
                         *           ]
                         *         ]
                         *       }
                         *     ] */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed to fetch matches"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/matches/{matchId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single match
         * @description Retrieves a specific match by its ID.   Includes full details such as current board, players, winner, and status.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Match ID */
                    matchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Match details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "_id": "650a01c28f9b5678abcd1234",
                         *       "player1": "64f9c23d8f9b1234abcd5678",
                         *       "player2": "64f9c23d8f9b1234abcd5679",
                         *       "status": "completed",
                         *       "winner": "64f9c23d8f9b1234abcd5678"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Match not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Match not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a match
         * @description Deletes a match by its ID.   Typically used for admin actions or clearing test matches.   Once deleted, the match cannot be recovered.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Match ID */
                    matchId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Match deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Match deleted successfully"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Match not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Match not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/host-google-autheticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Authenticate a Host with Google
         * @description Redirects the user to Google for authentication using OAuth.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirects to Google for authentication */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/host/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login a user using Google OAuth
         * @description Authenticates a user via Google and returns a JWT token upon successful login.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Google authentication successful, JWT token generated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example GoogleAuth Login Successful */
                            message?: string;
                            data?: {
                                /**
                                 * @description User ID
                                 * @example 605c72b1f1a3c619946b57da
                                 */
                                _id?: string;
                                /**
                                 * @description User's full name
                                 * @example John Doe
                                 */
                                fullName?: string;
                                /**
                                 * Format: email
                                 * @description User's email address
                                 * @example johndoe@example.com
                                 */
                                email?: string;
                                /**
                                 * @description Whether the user's email is verified
                                 * @example true
                                 */
                                isVerified?: boolean;
                            };
                            /**
                             * @description JWT token for authentication
                             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                             */
                            token?: string;
                        };
                    };
                };
                /** @description Bad Request - Google authentication failed */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Google authentication failed */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized - Token not provided or invalid */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Access denied, token must be provided */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/host": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all hosts
         * @description Fetches a list of all hosts from the database.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Hosts retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "host retrived successfully",
                         *       "hosts": [
                         *         {
                         *           "_id": "64f1a2b3c4d5e6f7890a1b2c",
                         *           "name": "John Doe",
                         *           "email": "johndoe@example.com"
                         *         },
                         *         {
                         *           "_id": "64f1a2b3c4d5e6f7890a1b2d",
                         *           "name": "Jane Smith",
                         *           "email": "janesmith@example.com"
                         *         }
                         *       ]
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Failed to fetch hosts */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed to fetch hosts"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new host account
         * @description Registers a new host in the system after validating inputs and ensuring uniqueness of email and full name.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Full name must contain only alphabets and spaces, at least 3 characters.
                         * @example John Doe
                         */
                        fullName: string;
                        /**
                         * Format: email
                         * @description Must be a valid email format.
                         * @example johndoe@example.com
                         */
                        email: string;
                        /**
                         * @description Password must be at least 8 characters long, contain one uppercase, one lowercase, one number, and one special character (!@#$%^&*).
                         * @example StrongPassword@123
                         */
                        password: string;
                        /**
                         * @description Must match the password.
                         * @example StrongPassword@123
                         */
                        repeatPassword: string;
                    };
                };
            };
            responses: {
                /** @description Host created successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host created successfully.",
                         *       "host": {
                         *         "_id": "64b8aef5f1e3b2d5c3a12345",
                         *         "fullName": "John Doe",
                         *         "email": "johndoe@example.com"
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Validation error or email already in use. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Internal server error",
                         *       "details": "Database connection failed"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hostlogin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Host login
         * @description Authenticates a host using email and password, and returns a JWT token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: email
                         * @example host@example.com
                         */
                        email: string;
                        /** @example myStrongPassword123 */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Host login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host Login successful",
                         *       "data": {
                         *         "_id": "64b0f3f1f2e45a1234567890",
                         *         "name": "John Doe",
                         *         "email": "host@example.com",
                         *         "createdAt": "2025-08-12T12:34:56.789Z",
                         *         "updatedAt": "2025-08-12T12:34:56.789Z"
                         *       },
                         *       "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Missing fields or invalid credentials */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Invalid Password"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Host not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hostlogout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout a host
         * @description Marks a host (tournament organizer) as logged out.   The host must provide their ID in the request body.   Once logged out, the isLoggedIn flag is set to false in the database.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the host logging out
                         * @example 64f9c23d8f9b1234abcd5678
                         */
                        id: string;
                    };
                };
            };
            responses: {
                /** @description Host logged out successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Logout successful"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized - missing or invalid host ID */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Unauthorized. tenant not authenticated"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Host not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error during logout */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Error logging out tenant",
                         *       "error": "Detailed error message"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/host/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a host by ID
         * @description Fetches a specific host from the database using its unique ID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique MongoDB ObjectId of the host. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Host retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "_id": "64f1a2b3c4d5e6f7890a1b2c",
                         *       "name": "John Doe",
                         *       "email": "johndoe@example.com",
                         *       "phone": "+2348012345678",
                         *       "createdAt": "2025-08-01T12:00:00.000Z",
                         *       "updatedAt": "2025-08-05T15:30:00.000Z"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid host ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Invalid host ID"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Host not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Host not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        /**
         * Update an existing host
         * @description Update the fullName and/or email of a host by their ID.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the host to update. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "fullName": "Michael Johnson",
                     *       "email": "michael.johnson@example.com"
                     *     } */
                    "application/json": {
                        /** @example Michael Johnson */
                        fullName?: string;
                        /** @example michael.johnson@example.com */
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description Host successfully updated. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host updated",
                         *       "host": {
                         *         "_id": "66b9055a582f53e6d8b12345",
                         *         "fullName": "Michael Johnson",
                         *         "email": "michael.johnson@example.com",
                         *         "createdAt": "2025-08-12T09:00:00.000Z",
                         *         "updatedAt": "2025-08-12T09:10:00.000Z"
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Bad request (nothing to update or invalid data). */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Nothing to update"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Host not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Host not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Something went wrong",
                         *       "details": "Error details here"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a host
         * @description Permanently removes a host from the database by their unique ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique ID of the host to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Host successfully deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host deleted"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid host ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Invalid host ID"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Host not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Host not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a match room (Bluetooth/Hotspot pairing flow).   🔹 Backend does NOT handle the actual Bluetooth/Wi-Fi connection — the app does this using native APIs.   🔹 Backend only creates a room and generates a bluetoothToken that Player A shares with Player B.
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 64f9c2e3a12bcd45ef567890 */
                        userId?: string;
                        /** @example TicTacToe */
                        gameType?: string;
                    };
                };
            };
            responses: {
                /** @description Match room created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Match room created",
                         *       "roomId": "650a6d123b7c11f7e09f45c9",
                         *       "room": {
                         *         "_id": "650a6d123b7c11f7e09f45c9",
                         *         "user": "64f9c2e3a12bcd45ef567890",
                         *         "gameType": "chess",
                         *         "status": "waiting"
                         *       },
                         *       "bluetoothToken": "abc123xy"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description matchRoom not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "matchRoom not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/match/{roomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join a match room (Bluetooth/Hotspot flow).   🔹 The mobile app must first connect devices via Bluetooth or hotspot.   🔹 Once Player B is connected locally and has the bluetoothToken, the app calls this API to register Player B in the backend.
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the match room created by Player A */
                    roomId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 64f9c2e3a12bcd45ef567891 */
                        userId?: string;
                        /** @example abc123xy */
                        handshakeToken?: string;
                    };
                };
            };
            responses: {
                /** @description Player joined successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Player added successfully",
                         *       "room": {
                         *         "_id": "650a6d123b7c11f7e09f45c9",
                         *         "player1": "64f9c2e3a12bcd45ef567890",
                         *         "player2": "64f9c2e3a12bcd45ef567891",
                         *         "gameType": "chess",
                         *         "status": "paired"
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Error if user already joined or room is full */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Room is already full"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Room not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Room not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/matchs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all match rooms */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of all match rooms */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "All match rooms",
                         *       "rooms": [
                         *         {
                         *           "_id": "650a6d123b7c11f7e09f45c9",
                         *           "gameType": "chess",
                         *           "status": "waiting",
                         *           "player1": {
                         *             "_id": "64f9...",
                         *             "username": "Alice"
                         *           },
                         *           "player2": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Room not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Room not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/matchs/{roomId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one match room by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    roomId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Match room details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Match room fetched",
                         *       "room": {
                         *         "_id": "650a6d123b7c11f7e09f45c9",
                         *         "gameType": "chess",
                         *         "status": "paired",
                         *         "player1": {
                         *           "_id": "64f9...",
                         *           "username": "Alice"
                         *         },
                         *         "player2": {
                         *           "_id": "64f9...",
                         *           "username": "Bob"
                         *         }
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Room not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Room not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete a match room */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    roomId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Match room deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Match room deleted successfully"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Room not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Room not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tournaments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all tournaments
         * @description Returns a list of all tournaments created in the system.   Useful for browsing or admin dashboards.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of tournaments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "tournaments": [
                         *         {
                         *           "id": "64f2b8d91a32f9c8b1c67890",
                         *           "name": "Summer Championship"
                         *         },
                         *         {
                         *           "id": "64f2b8d91a32f9c8b1c54321",
                         *           "name": "Winter Cup"
                         *         }
                         *       ]
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a new tournament and generate an invite link
         * @description Creates a tournament (by host or user) and returns the tournament data plus a unique invite link.   Use this link to allow others to join.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example Summer Championship */
                        name: string;
                        /** @example 25 */
                        maxPlayers?: string;
                        /**
                         * @description ID of the user or host creating the tournament
                         * @example 64f2b8d91a32f9c8b1c12345
                         */
                        organizerId?: string;
                    };
                };
            };
            responses: {
                /** @description Tournament created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Tournament created",
                         *       "tournament": {
                         *         "id": "64f2b8d91a32f9c8b1c67890",
                         *         "name": "Summer Championship",
                         *         "inviteLink": "http://localhost:5000/api/v1/tournaments/join/abc123"
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Missing required fields or invalid data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Tournament name is required"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tournaments/join/{inviteCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join a tournament using an invite code
         * @description A player can join an existing tournament if they have the valid invite code.   Prevents duplicate joins.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The invite code from the invite link
                     * @example abc123
                     */
                    inviteCode: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example 64f2c1a01a32f9c8b1c99999 */
                        userId?: string;
                    };
                };
            };
            responses: {
                /** @description Player successfully joined the tournament */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Player joined tournament"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid invite code or already joined */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tournaments/{tournamentId}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the invite link for a tournament
         * @description Retrieves the stored invite link for a given tournament.   Useful if the frontend needs to re-display or share the link.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 64f2b8d91a32f9c8b1c67890 */
                    tournamentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Invite link retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "inviteLink": "http://localhost:5000/api/v1/tournaments/join/abc123"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Tournament not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Tournament not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tournaments/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a tournament
         * @description Marks the tournament as started.   Can only be started once players have joined.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 64f2b8d91a32f9c8b1c67890 */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tournament started successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Tournament started"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid request (already started, no players, etc.) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Tournament already started"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Tournament not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tournaments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a single tournament
         * @description Retrieves full information about one tournament (players, status, invite link, etc.).
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 64f2b8d91a32f9c8b1c67890 */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tournament details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": "64f2b8d91a32f9c8b1c67890",
                         *       "name": "Summer Championship",
                         *       "players": [
                         *         "64f2c1a01a32f9c8b1c99999"
                         *       ]
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Tournament not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a tournament
         * @description Permanently deletes a tournament.   Only the creator should be allowed to delete.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @example 64f2b8d91a32f9c8b1c67890 */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tournament deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Tournament deleted"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized (not creator) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Only the creator can delete this tournament"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Tournament not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tournaments/{tournamentId}/winners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get winners of a completed tournament
         * @description Retrieves the first, second, and third place winners of a completed tournament.   This endpoint only works if the tournament has already ended.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /**
                     * @description The ID of the tournament
                     * @example 64f2b8d91a32f9c8b1c67890
                     */
                    tournamentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tournament winners retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Tournament winners retrieved successfully",
                         *       "winners": {
                         *         "first": "64f2b8d91a32f9c8b1c11111",
                         *         "second": "64f2b8d91a32f9c8b1c22222",
                         *         "third": "64f2b8d91a32f9c8b1c33333"
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Tournament has not yet finished */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Tournament is not yet completed. Winners will be available after the final round."
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Tournament not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Tournament not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal server error: database connection failed"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/google-autheticate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Authenticate a user with Google
         * @description Redirects the user to Google for authentication using OAuth.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirects to Google for authentication */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Login a user using Google OAuth
         * @description Authenticates a user via Google and returns a JWT token upon successful login.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Google authentication successful, JWT token generated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example GoogleAuth Login Successful */
                            message?: string;
                            data?: {
                                /**
                                 * @description User ID
                                 * @example 605c72b1f1a3c619946b57da
                                 */
                                _id?: string;
                                /**
                                 * @description User's full name
                                 * @example John Doe
                                 */
                                fullName?: string;
                                /**
                                 * Format: email
                                 * @description User's email address
                                 * @example johndoe@example.com
                                 */
                                email?: string;
                                /**
                                 * @description Whether the user's email is verified
                                 * @example true
                                 */
                                isVerified?: boolean;
                            };
                            /**
                             * @description JWT token for authentication
                             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                             */
                            token?: string;
                        };
                    };
                };
                /** @description Bad Request - Google authentication failed */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Google authentication failed */
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized - Token not provided or invalid */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Access denied, token must be provided */
                            message?: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Internal server error */
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all users
         * @description Fetches all users from the database.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "_id": "64d234ab1234567890abcdef",
                         *         "name": "John Doe",
                         *         "email": "john.doe@example.com",
                         *         "role": "user"
                         *       },
                         *       {
                         *         "_id": "64d234ab1234567890abcdea",
                         *         "name": "Jane Smith",
                         *         "email": "jane.smith@example.com",
                         *         "role": "admin"
                         *       }
                         *     ] */
                        "application/json": {
                            /** @example 64d234ab1234567890abcdef */
                            _id?: string;
                            /** @example John Doe */
                            name?: string;
                            /** @example john.doe@example.com */
                            email?: string;
                            /** @example user */
                            role?: string;
                        }[];
                    };
                };
                /** @description Failed to fetch users */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed to fetch users"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        put?: never;
        /**
         * Register a new user
         * @description Creates a new user account after validating input fields, ensuring unique email and username, and matching passwords.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description Full name must be at least 3 characters long and contain only alphabets and spaces.
                         * @example John Doe
                         */
                        fullName: string;
                        /**
                         * Format: email
                         * @description Must be a valid email address.
                         * @example john.doe@example.com
                         */
                        email: string;
                        /**
                         * @description Password must be at least 8 characters long, contain one uppercase, one lowercase, one number, and one special character (!@#$%^&*).
                         * @example StrongPass123!
                         */
                        password: string;
                        /**
                         * @description Must match the password exactly.
                         * @example StrongPass123!
                         */
                        repeatPassword: string;
                    };
                };
            };
            responses: {
                /** @description User registered successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "User registered successfully. Please check your email to verify your account.",
                         *       "data": {
                         *         "_id": "64f0b67f8c1b2a6d3c45e789",
                         *         "fullName": "John Doe",
                         *         "email": "john.doe@example.com",
                         *         "password": "$2b$10$hashedPasswordExample",
                         *         "createdAt": "2025-08-12T10:15:30.000Z",
                         *         "updatedAt": "2025-08-12T10:15:30.000Z"
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Validation error or duplicate record */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticates a user using email and password and returns a JWT token on success.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example john.doe@example.com */
                        email: string;
                        /**
                         * Format: password
                         * @example Password123!
                         */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Login successful */
                            message?: string;
                            /** @example {
                             *       "_id": "64a3b1d1f9a1b2c3d4e5f678",
                             *       "email": "john.doe@example.com",
                             *       "name": "John Doe"
                             *     } */
                            data?: Record<string, never>;
                            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                            token?: string;
                        };
                    };
                };
                /** @description Missing email/password or invalid password */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "please enter email and password"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "User not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Internal Server Error"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logout-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout a user
         * @description Marks a user as logged out.   The user must provide their ID in the request body.   Once logged out, the isLoggedIn flag is set to false in the database.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the user logging out
                         * @example 64fc1e29a9b01234dcba5678
                         */
                        id: string;
                    };
                };
            };
            responses: {
                /** @description User logged out successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Logout successful"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Unauthorized - missing or invalid user ID */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Unauthorized. tenant not authenticated"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "User not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error during logout */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Error logging out tenant",
                         *       "error": "Detailed error message"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user by ID
         * @description Retrieves a single user based on their unique MongoDB ObjectID.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description MongoDB ObjectID of the user to retrieve */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved the user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "_id": "64d7f15be4b0c4d8b2a9f6b1",
                         *       "name": "John Doe",
                         *       "email": "johndoe@example.com",
                         *       "role": "user",
                         *       "createdAt": "2025-08-01T12:34:56.789Z",
                         *       "updatedAt": "2025-08-01T12:34:56.789Z"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid user ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Invalid user ID"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "User not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        /**
         * Update a user's information
         * @description Updates the specified user's fullName and/or email. If both fields are missing in the request body, it will return a 400 error.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to update */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example John Doe */
                        fullName?: string;
                        /** @example johndoe@example.com */
                        email?: string;
                    };
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example 64df0f9c5d1b6c1f8e2b1234 */
                            _id?: string;
                            /** @example Jane Doe */
                            fullName?: string;
                            /** @example janedoe@example.com */
                            email?: string;
                        };
                    };
                };
                /** @description No fields provided to update */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Nothing to update"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed to update user"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a user by ID
         * @description Permanently removes a user from the system using their unique ID.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the user to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User successfully deleted. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "User deleted"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Invalid user ID. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Invalid user ID"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "User not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/request-host-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request host access (user)
         * @description Allows a user to request host access.   Requirement: user must have joined at least 2 tournaments.   The request will be flagged for manual admin approval.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the requesting user
                         * @example 64fd1e29a9b01234dcba5678
                         */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Request submitted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Request submitted, awaiting admin approval"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User has not met tournament requirement */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "You must play in at least 2 tournaments before requesting host access"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "User not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed to request host access",
                         *       "details": "Error details here"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/grant-host-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Grant host access (admin)
         * @description Allows an admin to grant host access to a user.   This sets the canHostTournament flag to true in the user's record.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The ID of the user receiving host access
                         * @example 64fd1e29a9b01234dcba5678
                         */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Host access granted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Host access granted",
                         *       "user": {
                         *         "_id": "64fd1e29a9b01234dcba5678",
                         *         "username": "player123",
                         *         "canHostTournament": true
                         *       }
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "User not found"
                         *     } */
                        "application/json": unknown;
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "error": "Failed to grant host access",
                         *       "details": "Error details here"
                         *     } */
                        "application/json": unknown;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
