  {
  "swaggerDoc": {
    "openapi": "3.0.0",
    "info": {
      "title": "Mooves Documentation",
      "version": "1.0.0",
      "description": "This is a swagger documentation for our web application MOOVES.",
      "license": {
        "name": "Base_URL: https://mooves.onrender.com "
      },
      "contact": {
        "names": "urigwe somto  ",
        "url": "https://github.com/urigwesomto201/mooves"
      }
    },
    "components": {
      "securitySchemes": {
        "BearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "StartTournamentLogic": {
          "type": "object",
          "description": "Internal logic function responsible for initializing a tournament.   It is not exposed as a direct API endpoint, but called internally by /api/v1/tournaments/{id}/start.   Handles participant validation, match pairing, status updates, email notifications, and logging.\n",
          "properties": {
            "input": {
              "type": "object",
              "properties": {
                "tournamentDoc": {
                  "type": "string",
                  "description": "Either a full Tournament document (with participants populated)   or just a tournament ID (string).   If only ID is provided, it fetches the document internally.\n",
                  "example": "670f1b6d2c1a5e304bce9f8a"
                }
              }
            },
            "process": {
              "type": "object",
              "description": "Steps performed by the logic",
              "properties": {
                "1": {
                  "type": "string",
                  "example": "Fetch full tournament document if only ID is provided."
                },
                "2": {
                  "type": "string",
                  "example": "Validate min and max participants."
                },
                "3": {
                  "type": "string",
                  "example": "Calculate prize pool based on entry fee × participant count."
                },
                "4": {
                  "type": "string",
                  "example": "Randomly pair participants into matches (Round 1)."
                },
                "5": {
                  "type": "string",
                  "example": "Create Match documents and link them to Round 1."
                },
                "6": {
                  "type": "string",
                  "example": "Update tournament status to 'ongoing'."
                },
                "7": {
                  "type": "string",
                  "example": "Send tournament-start emails to all participants."
                },
                "8": {
                  "type": "string",
                  "example": "Send confirmation email to tournament creator (Host/User)."
                },
                "9": {
                  "type": "string",
                  "example": "Log every email in EmailLog collection."
                }
              }
            },
            "output": {
              "type": "object",
              "properties": {
                "matchIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "6710cbd512c1a5e304bce9a1",
                    "6710cbd512c1a5e304bce9a2"
                  ]
                },
                "prizePool": {
                  "type": "number",
                  "example": 2500
                }
              }
            }
          },
          "example": {
            "input": {
              "tournamentDoc": "670f1b6d2c1a5e304bce9f8a"
            },
            "process": {
              "1": "Fetch tournament by ID",
              "2": "Validate participants",
              "3": "Pair players",
              "4": "Create matches",
              "5": "Send emails"
            },
            "output": {
              "matchIds": [
                "6710cbd512c1a5e304bce9a1",
                "6710cbd512c1a5e304bce9a2"
              ],
              "prizePool": 2500
            }
          }
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "servers": [
      {
        "url": "https://mooves.onrender.com",
        "description": "Production server"
      },
      {
        "url": "http://localhost:1777",
        "description": "Development server"
      }
    ],
    "paths": {
      "/api/v1/{matchId}/submit-result": {
        "post": {
          "summary": "Submit a result for a tournament match",
          "description": "This endpoint records the result of a given match in a tournament.   Logic flow:   - A match is played between 2 players (player1 vs player2).   - Once the result is submitted, the winner is saved in the winner field.   - The backend pairs winners of the current round to create the next round.   - This continues until the final round produces a single champion.   - The top 3 placements (1st, 2nd, 3rd) are recorded for tournaments.  \nWhy important? This is the core of the tournament flow. Without submitting results, the system cannot know who advances to the next round or how to distribute rankings and prizes.\n",
          "tags": [
            "Games"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "matchId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The ID of the match"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "winnerId": {
                      "type": "string",
                      "example": "64f9c23d8f9b1234abcd5678"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Result submitted successfully and next round generated if applicable",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Result submitted",
                    "matchId": "64f9c23d8f9b1234abcd5678",
                    "winner": "64f9c23d8f9b1234abcd5678"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid match or already completed",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Match already has a winner"
                  }
                }
              }
            },
            "404": {
              "description": "Match not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Match not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed "
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/{matchId}/submit-resultoffline": {
        "post": {
          "summary": "Submit a result for an offline (Bluetooth) tournament match",
          "description": "Used when players compete offline (e.g., via Bluetooth handshake).   The system validates the handshakeToken from the match object to ensure the result is genuine.   After verification, the result is saved and the winner progresses just like in online tournaments.\n",
          "tags": [
            "Games"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "matchId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Match ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "winnerId": {
                      "type": "string"
                    },
                    "handshakeToken": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "winnerId": "64f9c23d8f9b1234abcd5678",
                    "handshakeToken": "bluetooth-secret-123"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Offline result accepted"
            },
            "400": {
              "description": "Invalid match or already completed",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Match already has a winner"
                  }
                }
              }
            },
            "404": {
              "description": "Match not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Match not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed "
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/move": {
        "post": {
          "summary": "Make a move in an active match",
          "description": "This endpoint allows a player to make a move in a Tic-Tac-Toe style tournament game.  \n- Each player is assigned a symbol: X (player1) or O (player2).  \n- A player must play only when it's their turn.  \n- The system checks for a winner after each move.  \n\nWinning logic:\n1. Immediate Win: If a player forms 5 in a row (horizontal, vertical, diagonal, or anti-diagonal), they win immediately.  \n2. Highest Score Win: If no 5 in a row and the game ends (board full or time expired), the winner is decided by highest score.  \n   - Scoring: 2 in a row = 1 point, 3 in a row = 3 points, 4 in a row = 5 points.  \n3. Draw: If both players have equal scores when the game ends, the match is a draw.  \n",
          "tags": [
            "Games"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "playerId",
                    "row",
                    "col",
                    "matchid"
                  ],
                  "properties": {
                    "playerId": {
                      "type": "string",
                      "example": "64fc98e9a8120c2b4d3f1234"
                    },
                    "row": {
                      "type": "integer",
                      "example": 5
                    },
                    "col": {
                      "type": "integer",
                      "example": 8
                    },
                    "matchid": {
                      "type": "string",
                      "example": "650b7d9a87f91345c1234567"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Move successfully made (or game ended)",
              "content": {
                "application/json": {
                  "examples": {
                    "MoveMade": {
                      "summary": "Move made (no winner yet)",
                      "value": {
                        "message": "Move made",
                        "winner": null,
                        "match": {
                          "...": null
                        }
                      }
                    },
                    "WinnerByFive": {
                      "summary": "Player won by 5 in a row",
                      "value": {
                        "message": "Winner decided by 5 in a row",
                        "winner": "64fc98e9a8120c2b4d3f1234",
                        "match": {
                          "...": null
                        }
                      }
                    },
                    "WinnerByScore": {
                      "summary": "Player won by highest score",
                      "value": {
                        "message": "Winner decided by score",
                        "winner": "650b7d9a87f91345c1234567",
                        "match": {
                          "...": null
                        }
                      }
                    },
                    "Draw": {
                      "summary": "Match ended in a draw",
                      "value": {
                        "message": "Match ended in a draw",
                        "winner": null,
                        "match": {
                          "...": null
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request (missing fields, cell already taken, or match already completed)"
            },
            "403": {
              "description": "Invalid move (not the player's turn or player not in the match)"
            },
            "404": {
              "description": "Match not found"
            },
            "500": {
              "description": "Internal server error"
            }
          }
        }
      },
      "/api/v1/matches/{matchId}/join": {
        "post": {
          "summary": "Join or start a match in a tournament",
          "description": "This endpoint allows an authenticated player to join a specific match in a tournament.  \n<br><br>\nFlow Overview:  \n- When a player joins, they are added to the joinedPlayers array in the match.  \n- If both players have joined, the match automatically transitions to \"ongoing\" status and starts immediately.  \n- If only one player joins and the opponent does not join within a 2-minute grace period, the player who joined first wins automatically (\"auto-win\").  \n- Automatic email notifications are sent to both players (and can be extended to hosts).  \n- All notifications are logged to the EmailLog collection for transparency.  \n\nNotifications include:  \n- 🎉 Auto-win notification (to the winner)  \n- 😔 Forfeit notification (to the loser)\n\nThis system ensures fair play and tournament automation.\n\nAuthorization:  \nRequires a valid JWT token (Bearer Auth).\n",
          "tags": [
            "Matches"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "matchId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "MongoDB ObjectId of the match to join."
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully joined or completed the match logic.",
              "content": {
                "application/json": {
                  "examples": {
                    "bothJoined": {
                      "summary": "Both players joined, match started",
                      "value": {
                        "message": "Both players joined. Match started!",
                        "matchId": "670f52e81df21e2c4b6a120c",
                        "status": "ongoing"
                      }
                    },
                    "autoWin": {
                      "summary": "Opponent didn’t show up — auto-win applied",
                      "value": {
                        "message": "Opponent didn’t show up. Auto-win applied.",
                        "winner": "670f52d91df21e2c4b6a11ff",
                        "matchId": "670f52e81df21e2c4b6a120c",
                        "status": "completed"
                      }
                    }
                  }
                }
              }
            },
            "202": {
              "description": "Waiting for opponent to join.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Waiting for opponent to join...",
                    "matchId": "670f52e81df21e2c4b6a120c",
                    "joinedPlayers": [
                      "670f52d91df21e2c4b6a11ff"
                    ],
                    "status": "pending"
                  }
                }
              }
            },
            "404": {
              "description": "Match not found.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Match not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/moves": {
        "post": {
          "summary": "Create a new match for offline 1v1",
          "description": "Initializes a new match object in the database.   This is usually triggered when pairing players in the first round or subsequent rounds.   The system assigns player1 and player2, sets the board to default state, and status to in-progress.\n",
          "tags": [
            "Games"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "player1": {
                      "type": "string"
                    },
                    "matchroomId": {
                      "type": "string"
                    },
                    "player2": {
                      "type": "string"
                    }
                  },
                  "example": {
                    "matchroomId": "650a01c28f9b5678abcd1234",
                    "player1": "64f9c23d8f9b1234abcd5678",
                    "player2": "64f9c23d8f9b1234abcd5679"
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Match created successfully",
              "content": {
                "application/json": {
                  "example": {
                    "matchroomId": "650a01c28f9b5678abcd1234",
                    "player1": "64f9c23d8f9b1234abcd5678",
                    "player2": "64f9c23d8f9b1234abcd5679",
                    "status": "in-progress"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input"
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed "
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/matches": {
        "get": {
          "summary": "Get all matches",
          "description": "Retrieves all matches from the database.   Useful for admins or for viewing tournament progress.   Returns details like player IDs, board state, and status.\n",
          "tags": [
            "Games"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "List of matches",
              "content": {
                "application/json": {
                  "example": [
                    {
                      "_id": "650a01c28f9b5678abcd1234",
                      "player1": "64f9c23d8f9b1234abcd5678",
                      "player2": "64f9c23d8f9b1234abcd5679",
                      "status": "in-progress",
                      "board": [
                        [
                          "X",
                          "",
                          ""
                        ],
                        [
                          "",
                          "O",
                          ""
                        ],
                        [
                          "",
                          "",
                          ""
                        ]
                      ]
                    }
                  ]
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed to fetch matches"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/matches/{matchId}": {
        "get": {
          "summary": "Get a single match",
          "description": "Retrieves a specific match by its ID.   Includes full details such as current board, players, winner, and status.\n",
          "tags": [
            "Games"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "matchId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Match ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Match details",
              "content": {
                "application/json": {
                  "example": {
                    "_id": "650a01c28f9b5678abcd1234",
                    "player1": "64f9c23d8f9b1234abcd5678",
                    "player2": "64f9c23d8f9b1234abcd5679",
                    "status": "completed",
                    "winner": "64f9c23d8f9b1234abcd5678"
                  }
                }
              }
            },
            "404": {
              "description": "Match not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Match not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete a match",
          "description": "Deletes a match by its ID.   Typically used for admin actions or clearing test matches.   Once deleted, the match cannot be recovered.\n",
          "tags": [
            "Games"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "matchId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Match ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Match deleted",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Match deleted successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Match not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Match not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/host-google-autheticate": {
        "get": {
          "summary": "Authenticate a Host with Google",
          "description": "Redirects the user to Google for authentication using OAuth.",
          "tags": [
            "Host"
          ],
          "security": [],
          "responses": {
            "302": {
              "description": "Redirects to Google for authentication"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/host/auth/google/login": {
        "get": {
          "summary": "Login a user using Google OAuth",
          "description": "Authenticates a user via Google and returns a JWT token upon successful login.",
          "tags": [
            "Host"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "Google authentication successful, JWT token generated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "GoogleAuth Login Successful"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "User ID",
                            "example": "605c72b1f1a3c619946b57da"
                          },
                          "fullName": {
                            "type": "string",
                            "description": "User's full name",
                            "example": "John Doe"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "description": "User's email address",
                            "example": "johndoe@example.com"
                          },
                          "isVerified": {
                            "type": "boolean",
                            "description": "Whether the user's email is verified",
                            "example": true
                          }
                        }
                      },
                      "token": {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Google authentication failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Google authentication failed"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Token not provided or invalid",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Access denied, token must be provided"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/host": {
        "post": {
          "summary": "Create a new host account",
          "description": "Registers a new host in the system after validating inputs and ensuring uniqueness of email and full name.",
          "tags": [
            "Host"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "fullName",
                    "email",
                    "password",
                    "repeatPassword"
                  ],
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "minLength": 3,
                      "pattern": "^[A-Za-z ]+$",
                      "description": "Full name must contain only alphabets and spaces, at least 3 characters.",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Must be a valid email format.",
                      "example": "johndoe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "minLength": 8,
                      "pattern": "^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$",
                      "description": "Password must be at least 8 characters long, contain one uppercase, one lowercase, one number, and one special character (!@#$%^&*).",
                      "example": "StrongPassword@123"
                    },
                    "repeatPassword": {
                      "type": "string",
                      "description": "Must match the password.",
                      "example": "StrongPassword@123"
                    }
                  }
                },
                "examples": {
                  "ValidRequest": {
                    "summary": "Correct input",
                    "value": {
                      "fullName": "John Doe",
                      "email": "johndoe@example.com",
                      "password": "StrongPassword@123",
                      "repeatPassword": "StrongPassword@123"
                    }
                  },
                  "InvalidName": {
                    "summary": "Name contains numbers",
                    "value": {
                      "fullName": "John123",
                      "email": "johndoe@example.com",
                      "password": "StrongPassword@123",
                      "repeatPassword": "StrongPassword@123"
                    }
                  },
                  "InvalidPassword": {
                    "summary": "Password missing special character",
                    "value": {
                      "fullName": "John Doe",
                      "email": "johndoe@example.com",
                      "password": "StrongPassword123",
                      "repeatPassword": "StrongPassword123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Host created successfully.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host created successfully.",
                    "host": {
                      "_id": "64b8aef5f1e3b2d5c3a12345",
                      "fullName": "John Doe",
                      "email": "johndoe@example.com"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Validation error or email already in use.",
              "content": {
                "application/json": {
                  "examples": {
                    "MissingFields": {
                      "summary": "Missing required fields",
                      "value": {
                        "error": "Please provide fullName, email, password, and repeatPassword"
                      }
                    },
                    "PasswordMismatch": {
                      "summary": "Passwords do not match",
                      "value": {
                        "message": "Passwords do not match"
                      }
                    },
                    "EmailInUse": {
                      "summary": "Email already in use",
                      "value": {
                        "message": "Email: johndoe@example.com is already in use"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Internal server error",
                    "details": "Database connection failed"
                  }
                }
              }
            }
          }
        },
        "get": {
          "summary": "Retrieve all hosts",
          "description": "Fetches a list of all hosts from the database.",
          "tags": [
            "Host"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "Hosts retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "host retrived successfully",
                    "hosts": [
                      {
                        "_id": "64f1a2b3c4d5e6f7890a1b2c",
                        "name": "John Doe",
                        "email": "johndoe@example.com"
                      },
                      {
                        "_id": "64f1a2b3c4d5e6f7890a1b2d",
                        "name": "Jane Smith",
                        "email": "janesmith@example.com"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Failed to fetch hosts",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed to fetch hosts"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/hostlogin": {
        "post": {
          "summary": "Host login",
          "description": "Authenticates a host using email and password, and returns a JWT token.",
          "tags": [
            "Host"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email",
                    "password"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "host@example.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "myStrongPassword123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Host login successful",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host Login successful",
                    "data": {
                      "_id": "64b0f3f1f2e45a1234567890",
                      "name": "John Doe",
                      "email": "host@example.com",
                      "createdAt": "2025-08-12T12:34:56.789Z",
                      "updatedAt": "2025-08-12T12:34:56.789Z"
                    },
                    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            },
            "400": {
              "description": "Missing fields or invalid credentials",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Invalid Password"
                  }
                }
              }
            },
            "404": {
              "description": "Host not found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/hostlogout": {
        "post": {
          "summary": "Logout a host",
          "description": "Marks a host (tournament organizer) as logged out.   The host must provide their ID in the request body.   Once logged out, the isLoggedIn flag is set to false in the database.  \n",
          "tags": [
            "Host"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the host logging out",
                      "example": "64f9c23d8f9b1234abcd5678"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Host logged out successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Logout successful"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - missing or invalid host ID",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Unauthorized. tenant not authenticated"
                  }
                }
              }
            },
            "404": {
              "description": "Host not found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error during logout",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error logging out tenant",
                    "error": "Detailed error message"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/host/{id}": {
        "get": {
          "summary": "Get a host by ID",
          "description": "Fetches a specific host from the database using its unique ID.",
          "tags": [
            "Host"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "The unique MongoDB ObjectId of the host.",
              "schema": {
                "type": "string",
                "example": "64f1a2b3c4d5e6f7890a1b2c"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Host retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "_id": "64f1a2b3c4d5e6f7890a1b2c",
                    "name": "John Doe",
                    "email": "johndoe@example.com",
                    "phone": "+2348012345678",
                    "createdAt": "2025-08-01T12:00:00.000Z",
                    "updatedAt": "2025-08-05T15:30:00.000Z"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid host ID format",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Invalid host ID"
                  }
                }
              }
            },
            "404": {
              "description": "Host not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Host not found"
                  }
                }
              }
            }
          }
        },
        "put": {
          "summary": "Update an existing host",
          "description": "Update the fullName and/or email of a host by their ID.",
          "tags": [
            "Host"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The ID of the host to update."
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "Michael Johnson"
                    },
                    "email": {
                      "type": "string",
                      "example": "michael.johnson@example.com"
                    }
                  }
                },
                "example": {
                  "fullName": "Michael Johnson",
                  "email": "michael.johnson@example.com"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Host successfully updated.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host updated",
                    "host": {
                      "_id": "66b9055a582f53e6d8b12345",
                      "fullName": "Michael Johnson",
                      "email": "michael.johnson@example.com",
                      "createdAt": "2025-08-12T09:00:00.000Z",
                      "updatedAt": "2025-08-12T09:10:00.000Z"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (nothing to update or invalid data).",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Nothing to update"
                  }
                }
              }
            },
            "404": {
              "description": "Host not found.",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Host not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Something went wrong",
                    "details": "Error details here"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "summary": "Delete a host",
          "description": "Permanently removes a host from the database by their unique ID.",
          "tags": [
            "Host"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "The unique ID of the host to delete.",
              "schema": {
                "type": "string",
                "example": "64e13d7a2c3f4b0021f6b8c1"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Host successfully deleted",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host deleted"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid host ID",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Invalid host ID"
                  }
                }
              }
            },
            "404": {
              "description": "Host not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Host not found"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/match": {
        "post": {
          "summary": "Create a match room (Bluetooth/Hotspot pairing flow).   🔹 Backend does NOT handle the actual Bluetooth/Wi-Fi connection — the app does this using native APIs.   🔹 Backend only creates a room and generates a bluetoothToken that Player A shares with Player B.\n",
          "tags": [
            "Match Room"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "example": "64f9c2e3a12bcd45ef567890"
                    },
                    "gameType": {
                      "type": "string",
                      "example": "TicTacToe"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Match room created successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Match room created",
                    "roomId": "650a6d123b7c11f7e09f45c9",
                    "room": {
                      "_id": "650a6d123b7c11f7e09f45c9",
                      "user": "64f9c2e3a12bcd45ef567890",
                      "gameType": "chess",
                      "status": "waiting"
                    },
                    "bluetoothToken": "abc123xy"
                  }
                }
              }
            },
            "404": {
              "description": "matchRoom not found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "matchRoom not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/match/{roomId}": {
        "post": {
          "summary": "Join a match room (Bluetooth/Hotspot flow).   🔹 The mobile app must first connect devices via Bluetooth or hotspot.   🔹 Once Player B is connected locally and has the bluetoothToken, the app calls this API to register Player B in the backend.\n",
          "tags": [
            "Match Room"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "roomId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The ID of the match room created by Player A"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "example": "64f9c2e3a12bcd45ef567891"
                    },
                    "handshakeToken": {
                      "type": "string",
                      "example": "abc123xy"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Player joined successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Player added successfully",
                    "room": {
                      "_id": "650a6d123b7c11f7e09f45c9",
                      "player1": "64f9c2e3a12bcd45ef567890",
                      "player2": "64f9c2e3a12bcd45ef567891",
                      "gameType": "chess",
                      "status": "paired"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Error if user already joined or room is full",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Room is already full"
                  }
                }
              }
            },
            "404": {
              "description": "Room not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Room not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/matchs": {
        "get": {
          "summary": "Get all match rooms",
          "tags": [
            "Match Room"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "List of all match rooms",
              "content": {
                "application/json": {
                  "example": {
                    "message": "All match rooms",
                    "rooms": [
                      {
                        "_id": "650a6d123b7c11f7e09f45c9",
                        "gameType": "chess",
                        "status": "waiting",
                        "player1": {
                          "_id": "64f9...",
                          "username": "Alice"
                        },
                        "player2": null
                      }
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Room not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Room not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/matchs/{roomId}": {
        "get": {
          "summary": "Get one match room by ID",
          "tags": [
            "Match Room"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "roomId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Match room details",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Match room fetched",
                    "room": {
                      "_id": "650a6d123b7c11f7e09f45c9",
                      "gameType": "chess",
                      "status": "paired",
                      "player1": {
                        "_id": "64f9...",
                        "username": "Alice"
                      },
                      "player2": {
                        "_id": "64f9...",
                        "username": "Bob"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Room not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Room not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "summary": "Delete a match room",
          "tags": [
            "Match Room"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "roomId",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Match room deleted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Match room deleted successfully"
                  }
                }
              }
            },
            "404": {
              "description": "Room not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Room not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/tournaments": {
        "post": {
          "summary": "Create a new tournament and generate a unique invite link",
          "description": "This endpoint allows a User or Host to create a new tournament.  \n\n### 🧩 Logic Flow:\n- The organizer can be either a User or a Host.  \n- A User must have joined at least 2 tournaments before being allowed to host their own (unless already granted host rights).  \n- The system automatically validates maxPlayers, entryFee, and startTime.  \n- The maximum number of players allowed is 50.  \n- The startTime must be a valid future UTC date (ISO format).  \n- On success, the response includes a generated invite link (using a 4-byte random hex code).  \n- An optional email notification is sent to the organizer, confirming the tournament schedule.  \n\nNote:  \n- Default maxParticipants is 16 if not provided.  \n- Default entryFee is 0 if not provided.  \n- Automatically sets status to \"scheduled\".  \n- Auto-start is enabled by default (`autoStartEnabled: true`).\n\nAuthorization: Requires Bearer Token (JWT)\n",
          "tags": [
            "Tournaments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "organizerId",
                    "name",
                    "startTime"
                  ],
                  "properties": {
                    "organizerId": {
                      "type": "string",
                      "description": "ID of the user or host creating the tournament",
                      "example": "670f52e81df21e2c4b6a120c"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the tournament",
                      "example": "MOOOVES Pro League"
                    },
                    "maxPlayers": {
                      "type": "integer",
                      "description": "Maximum number of players allowed (must be ≤ 50)",
                      "example": 32
                    },
                    "entryFee": {
                      "type": "number",
                      "description": "Entry fee per participant",
                      "example": 500
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC start time (ISO 8601 format)",
                      "example": "2025-11-01T15:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Tournament created successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament created successfully",
                    "tournament": {
                      "_id": "670f52e81df21e2c4b6a120c",
                      "name": "MOOOVES Pro League",
                      "createdBy": "670f52d91df21e2c4b6a11ff",
                      "createdByModel": "Host",
                      "participants": [],
                      "maxParticipants": 32,
                      "entryFee": 500,
                      "prizePool": 0,
                      "inviteCode": "a1b2c3d4",
                      "status": "scheduled",
                      "startTime": "2025-11-01T15:00:00.000Z",
                      "autoStartEnabled": true
                    },
                    "inviteLink": "https://your-domain.com/api/v1/tournaments/join/a1b2c3d4"
                  }
                }
              }
            },
            "400": {
              "description": "Missing or invalid input fields",
              "content": {
                "application/json": {
                  "examples": {
                    "missingFields": {
                      "summary": "Missing organizerId or name",
                      "value": {
                        "error": "Host and name are required"
                      }
                    },
                    "invalidStartTime": {
                      "summary": "Invalid or past start time",
                      "value": {
                        "error": "Invalid or past start time"
                      }
                    },
                    "maxPlayerExceeded": {
                      "summary": "Too many players specified",
                      "value": {
                        "error": "maximum player is 50"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "User not eligible to host",
              "content": {
                "application/json": {
                  "example": {
                    "error": "You must join at least 2 tournaments before hosting one"
                  }
                }
              }
            },
            "404": {
              "description": "Organizer not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Organizer not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Unexpected server error"
                  }
                }
              }
            }
          }
        },
        "get": {
          "summary": "Get all tournaments",
          "description": "Returns a list of all tournaments created in the system.   Useful for browsing or admin dashboards.  \n",
          "tags": [
            "Tournaments"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "List of tournaments",
              "content": {
                "application/json": {
                  "example": {
                    "tournaments": [
                      {
                        "id": "64f2b8d91a32f9c8b1c67890",
                        "name": "Summer Championship"
                      },
                      {
                        "id": "64f2b8d91a32f9c8b1c54321",
                        "name": "Winter Cup"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/api/v1/tournaments/{id}/reschedule": {
        "patch": {
          "summary": "Reschedule a tournament (creator only)",
          "description": "Allows the tournament creator to change the start time of a scheduled tournament.   Only tournaments with a status of scheduled can be rescheduled.   The new start time must be a valid future date.  \nAfter successful update, all participants can optionally be notified via email or WhatsApp (if implemented).\n",
          "tags": [
            "Tournaments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The unique ID of the tournament to reschedule.",
              "example": "6710a5e3b1d6c8f8a93b52a1"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "newStartTime"
                  ],
                  "properties": {
                    "newStartTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The new start date and time for the tournament. Must be in the future.",
                      "example": "2025-11-10T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Tournament rescheduled successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Tournament rescheduled"
                      },
                      "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2025-11-10T14:30:00.000Z"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid new start time or tournament status.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Invalid new start time"
                      }
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Only the tournament creator can perform this action.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Only creator can reschedule"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Tournament not found"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Unexpected error occurred"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/tournaments/join/{inviteCode}": {
        "post": {
          "summary": "Join a tournament using an invite code",
          "description": "A player can join an existing tournament if they have the valid invite code.   Prevents duplicate joins.  \n",
          "tags": [
            "Tournaments"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "inviteCode",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The invite code from the invite link",
              "example": "abc123"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "example": "64f2c1a01a32f9c8b1c99999"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Player successfully joined the tournament",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Player joined tournament"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid invite code or already joined",
              "content": {
                "application/json": {
                  "examples": {
                    "invalid": {
                      "summary": "Invalid Code",
                      "value": {
                        "error": "Invalid invite code"
                      }
                    },
                    "duplicate": {
                      "summary": "Already Joined",
                      "value": {
                        "error": "Player already joined"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/api/v1/tournaments/{tournamentId}/invite": {
        "get": {
          "summary": "Get the invite link for a tournament",
          "description": "Retrieves the stored invite link for a given tournament.   Useful if the frontend needs to re-display or share the link.  \n",
          "tags": [
            "Tournaments"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "tournamentId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "64f2b8d91a32f9c8b1c67890"
            }
          ],
          "responses": {
            "200": {
              "description": "Invite link retrieved",
              "content": {
                "application/json": {
                  "example": {
                    "inviteLink": "http://localhost:5000/api/v1/tournaments/join/abc123"
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Tournament not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/api/v1/tournaments/{id}/start": {
        "post": {
          "summary": "Manually start a tournament",
          "description": "Starts a tournament when the creator decides to begin it.  \nThis endpoint checks that:\n- The tournament exists  \n- The authenticated user is the creator  \n- The tournament status is \"scheduled\" or \"pending\"  \n- The minimum number of participants has joined  \n\nOnce validated:\n- Players are randomly paired into matches for Round 1.  \n- Tournament status changes to \"ongoing\".  \n- All participants receive email notifications that the tournament has started.  \n- The creator (host/user) also receives a start confirmation email.  \n- Every sent email is logged in the EmailLog collection.  \n\n> ⚙️ You can also use ?force=true to override the minimum player requirement (for testing or host override).\n",
          "tags": [
            "Tournaments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "The unique tournament ID to start.",
              "schema": {
                "type": "string"
              },
              "example": "670f1b6d2c1a5e304bce9f8a"
            },
            {
              "in": "query",
              "name": "force",
              "required": false,
              "description": "Allows the creator to bypass minimum participant checks (use with caution).",
              "schema": {
                "type": "boolean",
                "example": true
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Tournament started successfully.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament started successfully",
                    "tournamentId": "670f1b6d2c1a5e304bce9f8a"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid tournament state or permission error.",
              "content": {
                "application/json": {
                  "examples": {
                    "NotCreator": {
                      "summary": "Unauthorized user",
                      "value": {
                        "message": "Only the creator can start this tournament"
                      }
                    },
                    "AlreadyStarted": {
                      "summary": "Tournament already active",
                      "value": {
                        "message": "Tournament already started or completed"
                      }
                    },
                    "NotEnoughPlayers": {
                      "summary": "Minimum player requirement not met",
                      "value": {
                        "message": "At least 4 participants required to start."
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Unexpected error occurred while starting tournament"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/tournaments/{id}": {
        "get": {
          "summary": "Get details of a single tournament",
          "description": "Retrieves full information about one tournament (players, status, invite link, etc.).  \n",
          "tags": [
            "Tournaments"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "64f2b8d91a32f9c8b1c67890"
            }
          ],
          "responses": {
            "200": {
              "description": "Tournament details",
              "content": {
                "application/json": {
                  "example": {
                    "id": "64f2b8d91a32f9c8b1c67890",
                    "name": "Summer Championship",
                    "players": [
                      "64f2c1a01a32f9c8b1c99999"
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete a tournament",
          "description": "Permanently deletes a tournament.   Only the creator should be allowed to delete.  \n",
          "tags": [
            "Tournaments"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "64f2b8d91a32f9c8b1c67890"
            }
          ],
          "responses": {
            "200": {
              "description": "Tournament deleted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament deleted"
                  }
                }
              }
            },
            "403": {
              "description": "Unauthorized (not creator)",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Only the creator can delete this tournament"
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/api/v1/tournaments/{tournamentId}/winners": {
        "get": {
          "summary": "Get winners of a completed tournament",
          "description": "Retrieves the first, second, and third place winners of a completed tournament.   This endpoint only works if the tournament has already ended.\n",
          "tags": [
            "Tournaments"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "tournamentId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The ID of the tournament",
              "example": "64f2b8d91a32f9c8b1c67890"
            }
          ],
          "responses": {
            "200": {
              "description": "Tournament winners retrieved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament winners retrieved successfully",
                    "winners": {
                      "first": "64f2b8d91a32f9c8b1c11111",
                      "second": "64f2b8d91a32f9c8b1c22222",
                      "third": "64f2b8d91a32f9c8b1c33333"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Tournament has not yet finished",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament is not yet completed. Winners will be available after the final round."
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Tournament not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal server error: database connection failed"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/banks": {
        "get": {
          "summary": "Get list of Nigerian banks",
          "description": "Fetches available Nigerian banks from Flutterwave for payouts and account linking.",
          "tags": [
            "Payment"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "List of Nigerian banks",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Banks fetched successfully",
                    "banks": [
                      {
                        "name": "Access Bank",
                        "code": "044"
                      },
                      {
                        "name": "GTBank",
                        "code": "058"
                      }
                    ]
                  }
                }
              }
            },
            "500": {
              "description": "Error fetching bank list",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error fetching bank list"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/banks/find": {
        "post": {
          "tags": [
            "Payment"
          ],
          "security": [],
          "summary": "Find a Nigerian bank by name",
          "description": "Search for banks in Nigeria using Flutterwave's bank list API. Provide a bank name in the request body to get its code.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "OPay"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Bank(s) found",
              "content": {
                "application/json": {
                  "examples": {
                    "success": {
                      "summary": "Bank found",
                      "value": {
                        "message": "Bank(s) found",
                        "banks": [
                          {
                            "name": "Opay Digital Services Limited (OPay)",
                            "code": "999991"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Missing required field",
              "content": {
                "application/json": {
                  "examples": {
                    "missingName": {
                      "summary": "Name not provided",
                      "value": {
                        "message": "Bank name is required"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Bank not found",
              "content": {
                "application/json": {
                  "examples": {
                    "notFound": {
                      "summary": "Bank does not exist",
                      "value": {
                        "message": "No bank found matching \"XYZ\""
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "examples": {
                    "flutterwaveError": {
                      "summary": "Error fetching from Flutterwave",
                      "value": {
                        "message": "Error finding bank"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/verify": {
        "get": {
          "summary": "Verify a tournament payment",
          "description": "Verifies a payment using Flutterwave transaction ID, updates tournament pool and transaction status.",
          "tags": [
            "Payment"
          ],
          "security": [],
          "parameters": [
            {
              "in": "query",
              "name": "transaction_id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Flutterwave transaction ID to verify",
              "example": "3939393939"
            }
          ],
          "responses": {
            "200": {
              "description": "Payment verified and tournament pool updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Payment verified & added to pool"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "payment": {
                            "type": "object",
                            "example": {
                              "user": "650c2fffc9a2de0012e9d0c5",
                              "tournament": "650c3f17c9a2de0012e9d0d1",
                              "amount": 2000,
                              "status": "success"
                            }
                          },
                          "cashPool": {
                            "type": "number",
                            "example": 6000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Payment not successful",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Payment not successful",
                    "data": {
                      "status": "failed",
                      "id": "3939393939"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error while verifying payment",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error verifying payment"
                  }
                }
              }
            }
          }
        },
        "post": {
          "summary": "Verify account OTP",
          "description": "This endpoint verifies the one-time password (OTP) sent to a user's registered email during sign-up or password reset.\nIf the OTP is valid and unexpired, the account is marked as verified.\n",
          "tags": [
            "Auth"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email",
                    "otp"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "description": "Registered user email to verify.",
                      "example": "moooves455@gmail.com"
                    },
                    "otp": {
                      "type": "string",
                      "description": "6-digit OTP sent to the user's email.",
                      "example": "123674"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OTP verified successfully.",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "message": "Account verified successfully"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid or expired OTP.",
              "content": {
                "application/json": {
                  "examples": {
                    "InvalidOTP": {
                      "summary": "Wrong code",
                      "value": {
                        "success": false,
                        "message": "Invalid OTP"
                      }
                    },
                    "ExpiredOTP": {
                      "summary": "OTP expired",
                      "value": {
                        "success": false,
                        "message": "OTP expired"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Account not found.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Account not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Server error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/bank/add": {
        "post": {
          "summary": "Add and save verified bank details for a user or host",
          "tags": [
            "Payment"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "accountNumber",
                    "bankCode",
                    "role",
                    "userId"
                  ],
                  "properties": {
                    "accountNumber": {
                      "type": "string",
                      "example": "1234567890"
                    },
                    "bankCode": {
                      "type": "string",
                      "example": "058"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "host",
                        "user"
                      ],
                      "example": "user"
                    },
                    "userId": {
                      "type": "string",
                      "description": "MongoDB ObjectId of the user/host",
                      "example": "64f0c0e4d5b87a1234567890"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Bank details saved successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Bank details saved successfully",
                    "accountName": "Jane Doe"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid account details",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Invalid account details"
                  }
                }
              }
            },
            "500": {
              "description": "Error saving bank details",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error adding bank details"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/initial": {
        "post": {
          "summary": "Initialize tournament payment",
          "description": "Starts a Flutterwave payment for a tournament entry fee. Ensures tournament capacity, valid fee, and prevents duplicate payments.",
          "tags": [
            "Payment"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email",
                    "tournamentId",
                    "userId"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "player@example.com"
                    },
                    "tournamentId": {
                      "type": "string",
                      "description": "Tournament ID (Mongo ObjectId)",
                      "example": "650c3f17c9a2de0012e9d0d1"
                    },
                    "userId": {
                      "type": "string",
                      "description": "User ID (Mongo ObjectId)",
                      "example": "650c2fffc9a2de0012e9d0c5"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Payment initialized successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Payment initialized"
                      },
                      "payment_link": {
                        "type": "string",
                        "example": "https://checkout.flutterwave.com/link/abc123"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Validation error (duplicate payment, tournament full, invalid fee)",
              "content": {
                "application/json": {
                  "examples": {
                    "TournamentNotFound": {
                      "value": {
                        "message": "Tournament not found"
                      }
                    },
                    "TournamentFull": {
                      "value": {
                        "message": "Tournament is full (max 50 players)"
                      }
                    },
                    "InvalidFee": {
                      "value": {
                        "message": "Invalid entry fee"
                      }
                    },
                    "DuplicatePayment": {
                      "value": {
                        "message": "You already paid for this tournament"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error while initializing payment",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Error initializing payment"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/distribute/{tournamentId}": {
        "post": {
          "summary": "Distribute tournament prize payouts to host, winners, and platform",
          "description": "This endpoint calculates and transfers payouts for a tournament based on total payments made by participants. <br><br> Distribution Formula - 🧑‍💼 Host → 50% of total pool   - 🥇 1st Place → 20%   - 🥈 2nd Place → 12%   - 🥉 3rd Place → 8%   - 🏢 Platform → 10% <br><br> Requires valid Flutterwave API key for transfers.\n",
          "tags": [
            "Payment"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "tournamentId",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The ID of the tournament for which to distribute payments."
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "winners"
                  ],
                  "properties": {
                    "winners": {
                      "type": "object",
                      "description": "IDs of the top 3 winners.",
                      "properties": {
                        "first": {
                          "type": "string",
                          "example": "6705f20e3c8f8b3b4c42f10b"
                        },
                        "second": {
                          "type": "string",
                          "example": "6705f21b3c8f8b3b4c42f12d"
                        },
                        "third": {
                          "type": "string",
                          "example": "6705f22a3c8f8b3b4c42f14e"
                        }
                      },
                      "example": {
                        "first": "6705f20e3c8f8b3b4c42f10b",
                        "second": "6705f21b3c8f8b3b4c42f12d",
                        "third": "6705f22a3c8f8b3b4c42f14e"
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payouts distributed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Payout distribution completed"
                      },
                      "payouts": {
                        "type": "object",
                        "properties": {
                          "host": {
                            "type": "number",
                            "example": 5000
                          },
                          "first": {
                            "type": "number",
                            "example": 2000
                          },
                          "second": {
                            "type": "number",
                            "example": 1200
                          },
                          "third": {
                            "type": "number",
                            "example": 800
                          },
                          "platform": {
                            "type": "number",
                            "example": 1000
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request or missing payment records",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "No successful payments found"
                  }
                }
              }
            },
            "404": {
              "description": "Tournament not found",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Tournament not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Internal server error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/send": {
        "post": {
          "summary": "Send a manual payout (fallback method)",
          "description": "This endpoint allows an admin or fallback handler to manually send a payout directly to a bank account via Flutterwave. <br><br> 🟡 Use this only if automatic distribution in `/distribute-payment` fails due to: - Flutterwave downtime - Missing host/winner bank info - Partial payout failure\n",
          "tags": [
            "Payment"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "accountBank",
                    "accountNumber",
                    "amount"
                  ],
                  "properties": {
                    "accountBank": {
                      "type": "string",
                      "description": "Bank code (e.g., \"044\" for Access Bank)",
                      "example": "044"
                    },
                    "accountNumber": {
                      "type": "string",
                      "description": "Recipient's 10-digit account number",
                      "example": "0123456789"
                    },
                    "amount": {
                      "type": "number",
                      "description": "Amount to transfer (in Naira)",
                      "example": 5000
                    },
                    "narration": {
                      "type": "string",
                      "description": "Description of the transaction",
                      "example": "Tournament host manual payout"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payout initiated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Payout initiated"
                      },
                      "data": {
                        "type": "object",
                        "description": "Flutterwave API response",
                        "properties": {
                          "status": {
                            "type": "string",
                            "example": "success"
                          },
                          "message": {
                            "type": "string",
                            "example": "Transfer Queued Successfully"
                          },
                          "data": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number",
                                "example": 123456789
                              },
                              "reference": {
                                "type": "string",
                                "example": "manual-172853945-82"
                              },
                              "amount": {
                                "type": "number",
                                "example": 5000
                              },
                              "currency": {
                                "type": "string",
                                "example": "NGN"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid or missing input data",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "accountBank, accountNumber, and amount are required"
                  }
                }
              }
            },
            "500": {
              "description": "Payout transfer failed",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Payout transfer failed"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/all": {
        "get": {
          "summary": "Retrieve all added bank details",
          "description": "Returns a list of all bank records stored for both hosts and players.",
          "tags": [
            "Banks"
          ],
          "responses": {
            "200": {
              "description": "List of all saved bank records.",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": [
                      {
                        "_id": "652a9fd2c3b0f8429b8a1190",
                        "userId": "652a9fd2c3b0f8429b8a1190",
                        "role": "host",
                        "bankName": "GTBank",
                        "accountNumber": "0123456789",
                        "accountName": "John Doe"
                      },
                      {
                        "_id": "652a9fd2c3b0f8429b8a1191",
                        "userId": "652a9fd2c3b0f8429b8a1191",
                        "role": "player",
                        "bankName": "Access Bank",
                        "accountNumber": "0987654321",
                        "accountName": "Jane Doe"
                      }
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "No bank records found.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "No bank details found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Failed to fetch bank details"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/{role}/{id}": {
        "get": {
          "summary": "Get a specific user's bank details",
          "description": "Fetch the bank details of a specific host or player by their user ID.",
          "tags": [
            "Banks"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "role",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "host",
                  "player"
                ]
              },
              "description": "The role of the user.",
              "example": "host"
            },
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "The unique ID of the user.",
              "example": "652a9fd2c3b0f8429b8a1190"
            }
          ],
          "responses": {
            "200": {
              "description": "Bank details retrieved successfully.",
              "content": {
                "application/json": {
                  "example": {
                    "success": true,
                    "data": {
                      "_id": "652a9fd2c3b0f8429b8a1190",
                      "userId": "652a9fd2c3b0f8429b8a1190",
                      "role": "host",
                      "bankName": "GTBank",
                      "accountNumber": "0123456789",
                      "accountName": "John Doe"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Bank details not found for the specified user.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Bank details not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Failed to retrieve bank details"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/webhook": {
        "post": {
          "summary": "Handle Flutterwave webhook events",
          "description": "Receives and processes webhook events from Flutterwave (payments and transfers).",
          "tags": [
            "Payment"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "event": "charge.completed",
                    "data": {
                      "tx_ref": "tournament_650c3f17_1696019200",
                      "amount": 2000,
                      "status": "successful"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Webhook processed successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Webhook processed"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid signature",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Invalid signature"
                  }
                }
              }
            },
            "500": {
              "description": "Server error while handling webhook",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Webhook processing failed"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/bank/verify": {
        "post": {
          "summary": "Verify a bank account number and bank code",
          "tags": [
            "Payment"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "account_number",
                    "bank_code"
                  ],
                  "properties": {
                    "account_number": {
                      "type": "string",
                      "example": "1234567890"
                    },
                    "bank_code": {
                      "type": "string",
                      "example": "044"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Account verified successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Account verified successfully",
                    "account_name": "John Doe",
                    "account_number": "1234567890",
                    "bank_code": "044"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid account details or missing parameters",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Invalid account details",
                    "error": "Bank code or account number is incorrect"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error verifying account"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/company-bank/register": {
        "post": {
          "summary": "Register or update company bank account",
          "tags": [
            "Payment"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "account_number",
                    "bank_code",
                    "account_name"
                  ],
                  "properties": {
                    "account_number": {
                      "type": "string",
                      "example": "1234567890"
                    },
                    "bank_code": {
                      "type": "string",
                      "example": "044"
                    },
                    "account_name": {
                      "type": "string",
                      "example": "Moooves Technologies Ltd"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Company bank registered successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Company bank registered successfully",
                    "data": {
                      "_id": "64f1a9a3c7b9f12345678901",
                      "account_number": "1234567890",
                      "bank_code": "044",
                      "account_name": "Moooves Technologies Ltd",
                      "recipientCode": "RCP_ABC123456789",
                      "createdAt": "2025-09-29T15:22:11.123Z"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Failed to create beneficiary on Flutterwave",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Failed to create beneficiary",
                    "data": {
                      "status": "error",
                      "message": "Invalid bank account"
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error while registering",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error registering company bank",
                    "error": "FLW API timeout"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/tournament/{tournamentId}": {
        "get": {
          "summary": "Get all transactions for a tournament",
          "tags": [
            "Payment"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "tournamentId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "Tournament ID",
              "example": "65123abcd456ef7890123456"
            }
          ],
          "responses": {
            "200": {
              "description": "Transactions fetched successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Transactions fetched successfully",
                    "count": 2,
                    "transactions": [
                      {
                        "_id": "652345abcdef1234567890",
                        "user": {
                          "_id": "60123abc456def78901234",
                          "username": "john_doe",
                          "email": "john@example.com"
                        },
                        "tournament": "65123abcd456ef7890123456",
                        "amount": 1000,
                        "status": "success",
                        "createdAt": "2025-09-29T14:22:11.123Z"
                      },
                      {
                        "_id": "652345abcdef1234567891",
                        "user": {
                          "_id": "60123abc456def78901235",
                          "username": "jane_doe",
                          "email": "jane@example.com"
                        },
                        "tournament": "65123abcd456ef7890123456",
                        "amount": 1000,
                        "status": "pending",
                        "createdAt": "2025-09-29T14:23:11.123Z"
                      }
                    ]
                  }
                }
              }
            },
            "404": {
              "description": "No transactions found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "No transactions found for this tournament"
                  }
                }
              }
            },
            "500": {
              "description": "Server error fetching transactions",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error fetching transactions"
                  }
                }
              }
            }
          }
        }
      },
      "/google-autheticate": {
        "get": {
          "summary": "Authenticate a user with Google",
          "description": "Redirects the user to Google for authentication using OAuth.",
          "tags": [
            "Google Authentication"
          ],
          "security": [],
          "responses": {
            "302": {
              "description": "Redirects to Google for authentication"
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/auth/google/login": {
        "get": {
          "summary": "Login a user using Google OAuth",
          "description": "Authenticates a user via Google and returns a JWT token upon successful login.",
          "tags": [
            "Google Authentication"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "Google authentication successful, JWT token generated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "GoogleAuth Login Successful"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "description": "User ID",
                            "example": "605c72b1f1a3c619946b57da"
                          },
                          "fullName": {
                            "type": "string",
                            "description": "User's full name",
                            "example": "John Doe"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "description": "User's email address",
                            "example": "johndoe@example.com"
                          },
                          "isVerified": {
                            "type": "boolean",
                            "description": "Whether the user's email is verified",
                            "example": true
                          }
                        }
                      },
                      "token": {
                        "type": "string",
                        "description": "JWT token for authentication",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request - Google authentication failed",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Google authentication failed"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Token not provided or invalid",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Access denied, token must be provided"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Internal server error"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/users": {
        "post": {
          "summary": "Register a new user",
          "tags": [
            "Users"
          ],
          "security": [],
          "description": "Creates a new user account after validating input fields, ensuring unique email and username, and matching passwords.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "fullName",
                    "email",
                    "password",
                    "repeatPassword"
                  ],
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "minLength": 3,
                      "pattern": "^[A-Za-z ]+$",
                      "description": "Full name must be at least 3 characters long and contain only alphabets and spaces.",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Must be a valid email address.",
                      "example": "john.doe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "minLength": 8,
                      "pattern": "^(?=.*\\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$",
                      "description": "Password must be at least 8 characters long, contain one uppercase, one lowercase, one number, and one special character (!@#$%^&*).",
                      "example": "StrongPass123!"
                    },
                    "repeatPassword": {
                      "type": "string",
                      "description": "Must match the password exactly.",
                      "example": "StrongPass123!"
                    }
                  }
                },
                "examples": {
                  "ValidRequest": {
                    "summary": "Correct input",
                    "value": {
                      "fullName": "John Doe",
                      "email": "john.doe@example.com",
                      "password": "StrongPass123!",
                      "repeatPassword": "StrongPass123!"
                    }
                  },
                  "InvalidName": {
                    "summary": "Name with numbers",
                    "value": {
                      "fullName": "John123",
                      "email": "john.doe@example.com",
                      "password": "StrongPass123!",
                      "repeatPassword": "StrongPass123!"
                    }
                  },
                  "InvalidPassword": {
                    "summary": "Missing special character",
                    "value": {
                      "fullName": "John Doe",
                      "email": "john.doe@example.com",
                      "password": "StrongPass123",
                      "repeatPassword": "StrongPass123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User registered successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "User registered successfully. Please check your email to verify your account.",
                    "data": {
                      "_id": "64f0b67f8c1b2a6d3c45e789",
                      "fullName": "John Doe",
                      "email": "john.doe@example.com",
                      "password": "$2b$10$hashedPasswordExample",
                      "createdAt": "2025-08-12T10:15:30.000Z",
                      "updatedAt": "2025-08-12T10:15:30.000Z"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Validation error or duplicate record",
              "content": {
                "application/json": {
                  "examples": {
                    "MissingFields": {
                      "summary": "Required fields missing",
                      "value": {
                        "message": "Please provide fullName, email, password, and repeatPassword"
                      }
                    },
                    "PasswordMismatch": {
                      "summary": "Passwords do not match",
                      "value": {
                        "message": "Passwords do not match"
                      }
                    },
                    "EmailInUse": {
                      "summary": "Email already exists",
                      "value": {
                        "message": "Email: john.doe@example.com already in use"
                      }
                    },
                    "NameInUse": {
                      "summary": "Name already exists",
                      "value": {
                        "message": "Name: John Doe already in use"
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        },
        "get": {
          "summary": "Retrieve a list of all users",
          "description": "Fetches all users from the database.",
          "tags": [
            "Users"
          ],
          "security": [],
          "responses": {
            "200": {
              "description": "A list of users",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "64d234ab1234567890abcdef"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "role": {
                          "type": "string",
                          "example": "user"
                        }
                      }
                    }
                  },
                  "example": [
                    {
                      "_id": "64d234ab1234567890abcdef",
                      "name": "John Doe",
                      "email": "john.doe@example.com",
                      "role": "user"
                    },
                    {
                      "_id": "64d234ab1234567890abcdea",
                      "name": "Jane Smith",
                      "email": "jane.smith@example.com",
                      "role": "admin"
                    }
                  ]
                }
              }
            },
            "500": {
              "description": "Failed to fetch users",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed to fetch users"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/login": {
        "post": {
          "summary": "User login",
          "description": "Authenticates a user using email and password and returns a JWT token on success.",
          "tags": [
            "Users"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email",
                    "password"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "example": "john.doe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "example": "Password123!"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Login successful",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Login successful"
                      },
                      "data": {
                        "type": "object",
                        "example": {
                          "_id": "64a3b1d1f9a1b2c3d4e5f678",
                          "email": "john.doe@example.com",
                          "name": "John Doe"
                        }
                      },
                      "token": {
                        "type": "string",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Missing email/password or invalid password",
              "content": {
                "application/json": {
                  "example": {
                    "message": "please enter email and password"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "User not found"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Internal Server Error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/logout-user": {
        "post": {
          "summary": "Logout a user",
          "description": "Marks a user as logged out.   The user must provide their ID in the request body.   Once logged out, the isLoggedIn flag is set to false in the database.  \n",
          "tags": [
            "Users"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the user logging out",
                      "example": "64fc1e29a9b01234dcba5678"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User logged out successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Logout successful"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - missing or invalid user ID",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Unauthorized. tenant not authenticated"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "example": {
                    "message": "User not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error during logout",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Error logging out tenant",
                    "error": "Detailed error message"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/users/{id}": {
        "get": {
          "summary": "Get a user by ID",
          "description": "Retrieves a single user based on their unique MongoDB ObjectID.",
          "tags": [
            "Users"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "MongoDB ObjectID of the user to retrieve",
              "schema": {
                "type": "string",
                "example": "64d7f15be4b0c4d8b2a9f6b1"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved the user",
              "content": {
                "application/json": {
                  "example": {
                    "_id": "64d7f15be4b0c4d8b2a9f6b1",
                    "name": "John Doe",
                    "email": "johndoe@example.com",
                    "role": "user",
                    "createdAt": "2025-08-01T12:34:56.789Z",
                    "updatedAt": "2025-08-01T12:34:56.789Z"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid user ID format",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Invalid user ID"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "User not found"
                  }
                }
              }
            }
          }
        },
        "put": {
          "summary": "Update a user's information",
          "description": "Updates the specified user's fullName and/or email. If both fields are missing in the request body, it will return a 400 error.",
          "tags": [
            "Users"
          ],
          "security": [],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "description": "The ID of the user to update",
              "schema": {
                "type": "string",
                "example": "64df0f9c5d1b6c1f8e2b1234"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fullName": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "email": {
                      "type": "string",
                      "example": "johndoe@example.com"
                    }
                  },
                  "example": {
                    "fullName": "Jane Doe",
                    "email": "janedoe@example.com"
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64df0f9c5d1b6c1f8e2b1234"
                      },
                      "fullName": {
                        "type": "string",
                        "example": "Jane Doe"
                      },
                      "email": {
                        "type": "string",
                        "example": "janedoe@example.com"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "No fields provided to update",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Nothing to update"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed to update user"
                  }
                }
              }
            }
          }
        },
        "delete": {
          "summary": "Delete a user by ID",
          "description": "Permanently removes a user from the system using their unique ID.",
          "tags": [
            "Users"
          ],
          "security": [],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "The ID of the user to delete.",
              "required": true,
              "schema": {
                "type": "string",
                "example": "64b8aef5f1e3b2d5c3a12345"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User successfully deleted.",
              "content": {
                "application/json": {
                  "example": {
                    "message": "User deleted"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid user ID.",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Invalid user ID"
                  }
                }
              }
            },
            "404": {
              "description": "User not found.",
              "content": {
                "application/json": {
                  "example": {
                    "error": "User not found"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/request-host-access": {
        "post": {
          "summary": "Request host access (user)",
          "description": "Allows a user to request host access.   Requirement: user must have joined at least 2 tournaments.   The request will be flagged for manual admin approval.  \n",
          "tags": [
            "Users"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "userId"
                  ],
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The ID of the requesting user",
                      "example": "64fd1e29a9b01234dcba5678"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Request submitted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Request submitted, awaiting admin approval"
                  }
                }
              }
            },
            "400": {
              "description": "User has not met tournament requirement",
              "content": {
                "application/json": {
                  "example": {
                    "error": "You must play in at least 2 tournaments before requesting host access"
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "User not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed to request host access",
                    "details": "Error details here"
                  }
                }
              }
            }
          }
        }
      },
      "/auth/grant-host-access": {
        "post": {
          "summary": "Grant host access (admin)",
          "description": "Allows an admin to grant host access to a user.   This sets the canHostTournament flag to true in the user's record.  \n",
          "tags": [
            "Users"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "userId"
                  ],
                  "properties": {
                    "userId": {
                      "type": "string",
                      "description": "The ID of the user receiving host access",
                      "example": "64fd1e29a9b01234dcba5678"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Host access granted successfully",
              "content": {
                "application/json": {
                  "example": {
                    "message": "Host access granted",
                    "user": {
                      "_id": "64fd1e29a9b01234dcba5678",
                      "username": "player123",
                      "canHostTournament": true
                    }
                  }
                }
              }
            },
            "404": {
              "description": "User not found",
              "content": {
                "application/json": {
                  "example": {
                    "error": "User not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error",
              "content": {
                "application/json": {
                  "example": {
                    "error": "Failed to grant host access",
                    "details": "Error details here"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/forgot": {
        "post": {
          "summary": "Request password reset (for User or Host)",
          "description": "Checks whether the given email exists in either the User or Host collection.   Returns { found: true } if the account exists, along with the account ID and type. The frontend will then use this ID for the reset step.\n",
          "tags": [
            "Auth"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "email"
                  ],
                  "properties": {
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "player@example.com"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Account found and ID returned.",
              "content": {
                "application/json": {
                  "example": {
                    "found": true,
                    "id": "670655cb9c4c03e3a86e71e0",
                    "accountType": "user"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid or missing email.",
              "content": {
                "application/json": {
                  "example": {
                    "found": false,
                    "message": "Email is required"
                  }
                }
              }
            },
            "404": {
              "description": "Account not found.",
              "content": {
                "application/json": {
                  "example": {
                    "found": false
                  }
                }
              }
            },
            "500": {
              "description": "Server error.",
              "content": {
                "application/json": {
                  "example": {
                    "found": false,
                    "message": "Server error"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/forgot/reset": {
        "post": {
          "summary": "Reset account password",
          "description": "Resets the password for a User or Host based on the provided account ID.   The frontend supplies the id (from the /forgot response) and a new password.\n",
          "tags": [
            "Auth"
          ],
          "security": [],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "newPassword"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "670655cb9c4c03e3a86e71e0"
                    },
                    "newPassword": {
                      "type": "string",
                      "format": "password",
                      "example": "NewPassword123!"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Password reset successful.",
              "content": {
                "application/json": {
                  "example": {
                    "success": true
                  }
                }
              }
            },
            "400": {
              "description": "Missing fields or invalid payload.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Missing fields"
                  }
                }
              }
            },
            "404": {
              "description": "Account not found.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Account not found"
                  }
                }
              }
            },
            "500": {
              "description": "Server error.",
              "content": {
                "application/json": {
                  "example": {
                    "success": false,
                    "message": "Server error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "Internal Logic",
        "description": "Non-endpoint business logic used internally by API controllers."
      },
      {
        "name": "Banks",
        "description": "Manage host and player bank details"
      },
      {
        "name": "Auth",
        "description": "User & Host onboarding and password recovery"
      }
    ]
  }
}